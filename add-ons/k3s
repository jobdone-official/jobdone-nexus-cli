#!/bin/bash

# Inspired by: https://github.com/openreplay/openreplay/blob/main/scripts/helmcharts/init.sh
# Inspired by: https://github.com/openreplay/openreplay/blob/main/scripts/helmcharts/openreplay-cli

# check if the argocd_private_ssh_key_path exists
if [ ! -f "/root/.ssh/$argocd_private_ssh_key_path" ]; then
    log ERROR "The private SSH key for ArgoCD does not exist."
    exit 1
fi

check_k3s_ready() {
    while true; do
        if kubectl get nodes &> /dev/null; then
            log INFO "k3s is ready!"
            break
        else
            log INFO "Waiting for k3s to be ready..."
            sleep 5
        fi
    done
}

# k3s
if ! k3s --version &> /dev/null; then
    log INFO "Installing k3s without traefik..."
    curl -sfL https://get.k3s.io | sudo K3S_KUBECONFIG_MODE="644" INSTALL_K3S_EXEC="--disable traefik --tls-san 10.253.143.68 --kubelet-arg=runtime-request-timeout=3h" sh - || { log ERROR "Failed to install k3s."; exit 1; }
    # Copy k3s.yaml to root's .kube directory and ensure directory exists
    sudo mkdir -p /root/.kube
    sudo cp /etc/rancher/k3s/k3s.yaml /root/.kube/config
    sudo chmod 0644 /root/.kube/config

    # If the script is run with sudo (indicating a non-root user invoked it)
    if [ ! -z "scjdn" ]; then       
        # Ensure the .kube directory exists in the non-root user's home and copy the config
        sudo mkdir -p "/home/scjdn/.kube"
        sudo cp /etc/rancher/k3s/k3s.yaml "/home/scjdn/.kube/config"
        sudo chmod 0644 "/home/scjdn/.kube/config"
        sudo chown scjdn:scjdn "/home/scjdn/.kube/config"
    fi

    sleep 10
    log INFO "k3s installed successfully."

    check_k3s_ready
else
    log WARN "k3s is already installed."
fi

# create jobdone-nexus namespace
if ! kubectl get namespace jobdone-nexus &> /dev/null; then
    log INFO "Creating jobdone-nexus namespace..."
    kubectl create namespace jobdone-nexus || { log ERROR "Failed to create jobdone-nexus namespace."; exit 1;}
    log INFO "jobdone-nexus namespace created successfully."
else
    log WARN "jobdone-nexus namespace already exists."
fi

# eget
if ! eget --version &> /dev/null; then
    log INFO "Installing eget..."
    download_url=$(curl https://api.github.com/repos/zyedidia/eget/releases/latest -s | grep linux_amd64 | grep browser_download_url | cut -d '"' -f4)
    curl -SsL ${download_url} -o /tmp/eget.tar.gz || { log ERROR "Failed to download eget."; exit 1; }
    tar -xf /tmp/eget.tar.gz --strip-components=1 -C /tmp/ || { log ERROR "Failed to extract eget."; exit 1; }
    sudo mv /tmp/eget /usr/local/bin/eget || { log ERROR "Failed to move eget to /usr/local/bin."; exit 1; }
    sudo chmod +x /usr/local/bin/eget || { log ERROR "Failed to make eget executable."; exit 1; }
    log INFO "eget installed successfully."
else
    log WARN "eget is already installed."
fi

# k9s
if ! k9s version &> /dev/null; then
    log INFO "Installing k9s to /usr/local/bin"
    sudo /usr/local/bin/eget -q --to /usr/local/bin derailed/k9s --asset=tar.gz --asset=^sbom || { log ERROR "Failed to install k9s."; exit 1; }
    log INFO "k9s installed successfully."
else
    log WARN "k9s is already installed."
fi
