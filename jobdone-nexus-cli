#!/bin/bash

# Inspired by: https://github.com/openreplay/openreplay/blob/main/scripts/helmcharts/init.sh
# Inspired by: https://github.com/openreplay/openreplay/blob/main/scripts/helmcharts/openreplay-cli

# Check if the first argument is "install"
if [ "$1" != "install" ]; then
    echo "Usage: $0 install --zerotier-id <ZeroTier-Network-ID> --trmm-mesh-agent <TRMM-Mesh-Agent> --trmm-api-url <TRMM-API-URL> --trmm-client-id <TRMM-Client-ID> --trmm-site-id <TRMM-Site-ID> --trmm-auth-key <TRMM-Auth-Key>"
    exit 1
fi
shift # Remove the 'install' argument, leaving only the named parameters

# Initialize variables
user=""
zerotier_id=""
trmm_mesh_agent=""
trmm_api_url=""
trmm_client_id=""
trmm_site_id=""
trmm_auth_key=""
static_ip=""
gateway=""
netmask=""
dns=""

# Parse named arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --user) user="$2"; shift ;;
        --zerotier-id) zerotier_id="$2"; shift ;;
        --trmm-mesh-agent) trmm_mesh_agent="$2"; shift ;;
        --trmm-api-url) trmm_api_url="$2"; shift ;;
        --trmm-client-id) trmm_client_id="$2"; shift ;;
        --trmm-site-id) trmm_site_id="$2"; shift ;;
        --trmm-auth-key) trmm_auth_key="$2"; shift ;;
        --static-ip) static_ip="$2"; shift ;;
        --gateway) gateway="$2"; shift ;;
        --netmask) netmask="$2"; shift ;;
        --dns) dns="$2"; shift ;;
        *) echo "Unknown parameter passed: $1"; exit 1 ;;
    esac
    shift
done

# Check if variables are set
if [ -z "$user" ] || [ -z "$zerotier_id" ] || [ -z "$trmm_mesh_agent" ] || [ -z "$trmm_api_url" ] || [ -z "$trmm_client_id" ] || [ -z "$trmm_site_id" ] || [ -z "$trmm_auth_key" ]; then
    echo "Usage: $0 install --user <username> --zerotier-id <ZeroTier-Network-ID> --trmm-mesh-agent <TRMM-Mesh-Agent> --trmm-api-url <TRMM-API-URL> --trmm-client-id <TRMM-Client-ID> --trmm-site-id <TRMM-Site-ID> --trmm-auth-key <TRMM-Auth-Key>"
    exit 1
fi

# Define log file with timestamp
log_file="jobdone_nexus_installation_$(date +%Y-%m-%dT%H:%M:%S).log"

# Function to log messages
log() {
    echo "$(date +%Y-%m-%dT%H:%M:%S) - $1" | tee -a $log_file
}

# install basic pacakges as root
apt update &>> $log_file || { log "Failed to update apt."; exit 1; }
apt install -y curl sudo vim htop git net-tools wget ncdu network-manager &>> $log_file || { log "Failed to install basic packages."; exit 1; }

# k3s
if ! k3s --version &> /dev/null; then
    log "Installing k3s without traefik..."
    curl -sfL https://get.k3s.io | sudo K3S_KUBECONFIG_MODE="644" INSTALL_K3S_EXEC="--disable traefik" sh - &>> $log_file || { log "Failed to install k3s."; exit 1; }
    [[ -d ~/.kube ]] || mkdir ~/.kube
    sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
    sudo chmod 0644 ~/.kube/config
    sudo chown -R $user /home/$user/.kube/config
    sleep 10
else
    log "k3s is already installed."
fi

check_k3s_ready() {
    while true; do
        if kubectl get nodes &> /dev/null; then
            log "k3s is ready!"
            break
        else
            log "Waiting for k3s to be ready..."
            sleep 5
        fi
    done
}

check_k3s_ready

# argocd
if ! kubectl get ns argocd &> /dev/null; then
    log "Installing ArgoCD..."
    kubectl create namespace argocd &>> $log_file || { log "Failed to create ArgoCD namespace."; exit 1; }
    kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml &>> $log_file || { log "Failed to install ArgoCD."; exit 1; }
else
    log "ArgoCD is already installed."
fi

# k9s
if ! k9s version &> /dev/null; then
    log "Installing k9s..."
    curl -sS https://webinstall.dev/k9s | bash &>> $log_file || { log "Failed to install k9s."; exit 1; }
else
    log "k9s is already installed."
fi

# zerotier
if ! zerotier-cli info &> /dev/null; then
    log "Setting up ZeroTier..."
    curl -s https://install.zerotier.com | sudo bash &>> $log_file || { log "Failed to install ZeroTier."; exit 1; }
    sudo zerotier-cli join $zerotier_id &>> $log_file || { log "Failed to join ZeroTier network."; exit 1; }
else
    log "ZeroTier is already installed."
fi

# tacticalrmm agent
if [ ! -f /usr/local/bin/rmmagent ]; then
    log "Installing TacticalRMM agent..."
    wget https://raw.githubusercontent.com/netvolt/LinuxRMM-Script/main/rmmagent-linux.sh &>> $log_file || { log "Failed to download TacticalRMM script."; exit 1; }
    sudo chmod +x rmmagent-linux.sh
    sudo ./rmmagent-linux.sh install 'amd64' $trmm_mesh_agent $trmm_api_url $trmm_client_id $trmm_site_id $trmm_auth_key server
else
    log "TacticalRMM agent is already installed."
fi

log "JobDone Nexus Installation complete!"

# if network configuration is provided, apply it

if [ -n "$static_ip" ] && [ -n "$gateway" ] && [ -n "$netmask" ] && [ -n "$dns" ]; then
    log "Setting up network configuration..."

    # Backup current network configuration
    CONNECTION_NAME=$(nmcli -t -f UUID,TYPE con show --active | grep ethernet | cut -d':' -f1)
    BACKUP_CONFIG="/tmp/network_config_backup_${CONNECTION_NAME}.nmconnection"
    nmcli con export "$CONNECTION_NAME" > "$BACKUP_CONFIG"

    # Set static IP
    nmcli con mod "$CONNECTION_NAME" ipv4.addresses "$static_ip/$netmask" ipv4.gateway "$gateway" ipv4.dns "$dns" ipv4.method manual

    # Restart network connection to apply changes
    nmcli con down "$CONNECTION_NAME" && nmcli con up "$CONNECTION_NAME"

    # Check for internet connectivity
    ping -c 4 8.8.8.8 > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        log "Internet connection is up. Static IP set successfully."
    else
        log "Internet connection failed. Reverting to original configuration..."
        nmcli con load "$BACKUP_CONFIG" && nmcli con up "$CONNECTION_NAME"
        log "Original configuration restored."
    fi
fi