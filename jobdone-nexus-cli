#!/bin/bash

# Check if the first argument is "install"
if [ "$1" != "install" ]; then
    echo "Usage: $0 install --hostname <hostname> --tailscale-authkey <tailscale_authkey> --trmm-mesh-agent <trmm_mesh_agent> --trmm-api-url <trmm_api_url> --trmm-client-id <trmm_client_id> --trmm-site-id <trmm_site_id> --trmm-auth-key <trmm_auth_key> [--static-ip <static_ip>] [--gateway <gateway>] [--netmask <netmask>] [--dns <dns>] [--skip-reset-machine-id]"
    exit 1
fi
shift # Remove the 'install' argument, leaving only the named parameters

cat << "EOF"

       _       _     _____                     _   _                        _____ _      _____ 
      | |     | |   |  __ \                   | \ | |                      / ____| |    |_   _|
      | | ___ | |__ | |  | | ___  _ __   ___  |  \| | _____  ___   _ ___  | |    | |      | |  
  _   | |/ _ \| '_ \| |  | |/ _ \| '_ \ / _ \ | . ` |/ _ \ \/ / | | / __| | |    | |      | |  
 | |__| | (_) | |_) | |__| | (_) | | | |  __/ | |\  |  __/>  <| |_| \__ \ | |____| |____ _| |_ 
  \____/ \___/|_.__/|_____/ \___/|_| |_|\___| |_| \_|\___/_/\_\\__,_|___/  \_____|______|_____|


EOF

# Initialize variables
hostname=""
tailscale_authkey=""
skip_reset_machine_id=false

# optional params
trmm_mesh_agent=""
trmm_api_url=""
trmm_client_id=""
trmm_site_id=""
trmm_auth_key=""

# can be enabled with the addon
static_ip=""
gateway=""
netmask=""
dns=""

# Parse named arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --hostname) hostname="$2"; shift ;;
        --tailscale-authkey) tailscale_authkey="$2"; shift ;;
        --skip-reset-machine-id) skip_reset_machine_id=true ;;

        # optional params
        --trmm-mesh-agent) trmm_mesh_agent="$2"; shift ;;
        --trmm-api-url) trmm_api_url="$2"; shift ;;
        --trmm-client-id) trmm_client_id="$2"; shift ;;
        --trmm-site-id) trmm_site_id="$2"; shift ;;
        --trmm-auth-key) trmm_auth_key="$2"; shift ;;

        # can be enabled with the addon
        --static-ip) static_ip="$2"; shift ;;
        --gateway) gateway="$2"; shift ;;
        --netmask) netmask="$2"; shift ;;
        --dns) dns="$2"; shift ;;
        *) echo "Unknown parameter passed: $1"; exit 1 ;;
    esac
    shift
done

# Check if variables are set
# addon params:
# - static_ip
# - gateway
# - netmask
# - dns
if [ -z "$hostname" ] || [ -z "$tailscale_authkey" ]; then
    echo "Usage: $0 install --hostname <hostname> --tailscale-authkey <tailscale_authkey> --trmm-mesh-agent <trmm_mesh_agent> --trmm-api-url <trmm_api_url> --trmm-client-id <trmm_client_id> --trmm-site-id <trmm_site_id> --trmm-auth-key <trmm_auth_key> [--static-ip <static_ip>] [--gateway <gateway>] [--netmask <netmask>] [--dns <dns>] [--skip-reset-machine-id]"
    exit 1
fi

# Define log file with timestamp
log_file="jobdone_nexus_installation_$(date +%Y-%m-%dT%H:%M:%S).log"

# Function to log messages with levels
log() {
    local level=$1
    local message=$2
    local prefix=""
    case $level in
        INFO) prefix="\e[34mℹ️ [INFO]";;  # Blue
        WARN) prefix="\e[33m⚠️ [WARN]";;  # Yellow
        ERROR) prefix="\e[31m❌ [ERROR]";; # Red
        *) prefix="\e[0m📘";;             # Default
    esac
    echo -e "$prefix [$(date +%Y-%m-%dT%H:%M:%S)] - $message\e[0m" | tee -a $log_file
}

# log params
echo "hostname: $hostname"
echo "static_ip: $static_ip"
echo "gateway: $gateway"
echo "netmask: $netmask"
echo "dns: $dns"

# Determine the invoker's home directory
if [ ! -z "$SUDO_USER" ]; then
    INVOKER_HOME=$(getent passwd "$SUDO_USER" | cut -d: -f6)
else
    echo "Please run this script with 'sudo'."
    exit 1
fi

# set timezone to UTC
log INFO "Setting timezone to UTC..."
sudo timedatectl set-timezone UTC || { log ERROR "Failed to set timezone to UTC."; exit 1; }
log INFO "Timezone set to UTC."

# set the hostname if it's provided
if [ -n "$hostname" ]; then
    log INFO "Setting hostname to $hostname..."
    sudo hostnamectl set-hostname "$hostname" || { log ERROR "Failed to set hostname."; exit 1; }
    # change /etc/hosts
    sudo sed -i "s/127\.0\.1\.1.*/127.0.1.1\t$hostname/" /etc/hosts || { log ERROR "Failed to update /etc/hosts."; exit 1; }
    log INFO "Hostname set to $hostname."
fi

# reset machine id if enabled
if [ "$skip_reset_machine_id" = true ]; then
    log INFO "Skipping machine ID reset as requested."
else
    log INFO "Resetting machine ID..."
    sudo rm -f /etc/machine-id || { log ERROR "Failed to remove machine ID."; exit 1; }
    sudo systemd-machine-id-setup || { log ERROR "Failed to regenerate machine ID."; exit 1; }
    log INFO "Machine ID reset successfully."
fi

# install basic packages
log INFO "Installing basic packages..."
sudo apt update || { log ERROR "Failed to update apt."; exit 1; }
sudo apt upgrade -y || { log ERROR "Failed to upgrade packages."; exit 1; }
sudo apt install -y curl unzip vim htop git net-tools wget ncdu tmux btop || { log ERROR "Failed to install basic packages."; exit 1; }
# sudo apt install -y iperf3 # note iperf requires an interactive prompt
log INFO "Basic packages installed successfully."

# install Tailscale
if ! tailscale version &> /dev/null; then
    log INFO "Installing Tailscale..."
    curl -fsSL https://tailscale.com/install.sh | sh || { log ERROR "Failed to install Tailscale."; exit 1; }
    log INFO "Tailscale installed successfully."
else
    log WARN "Tailscale is already installed."
fi

# join Tailscale network
if tailscale status | grep -q "Logged out"; then
    log INFO "Joining Tailscale network..."
    sudo tailscale up --authkey "$tailscale_authkey" || { log ERROR "Failed to join Tailscale network."; exit 1; }
    
    # wait for Tailscale to connect
    timeout=60
    start_time=$(date +%s)
    while true; do
        current_time=$(date +%s)
        elapsed_time=$((current_time - start_time))
        
        if [ $elapsed_time -ge $timeout ]; then
            log ERROR "Timeout reached. Tailscale failed to connect in time."
            exit 1
        fi
        
        if ! tailscale status | grep -q "Logged out"; then
            log INFO "Tailscale connected successfully!"
            break
        else
            log INFO "Waiting for Tailscale to connect... $(($timeout - $elapsed_time)) seconds remaining"
            sleep 5
        fi
    done
else
    log WARN "Tailscale is already connected."
fi

# get Tailscale IP
tailscale_ip=$(tailscale ip | head -n 1)
if [ -z "$tailscale_ip" ]; then
    log ERROR "Failed to get Tailscale IP."
    exit 1
fi

# install cloudflared
if ! cloudflared --version &> /dev/null; then
    log INFO "Installing Cloudflared..."
    # Add cloudflare gpg key
    sudo mkdir -p --mode=0755 /usr/share/keyrings
    curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null

    # Add this repo to your apt repositories
    echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared bookworm main' | sudo tee /etc/apt/sources.list.d/cloudflared.list

    # install cloudflared
    sudo apt-get update && sudo apt-get install cloudflared
    log INFO "Cloudflared installed successfully."
else
    log WARN "Cloudflared is already installed."
fi

# Function to add 127.0.0.1 jobdonenexus to /etc/hosts if it doesn't exist
add_hosts_entry() {
    local ip="127.0.0.1"
    local hostname="jobdonenexus"
    
    # Check if a line contains both the IP and the hostname
    if grep -qE "^$ip[[:space:]]+$hostname" /etc/hosts; then
        log INFO "Entry '$ip $hostname' already exists in /etc/hosts."
    else
        log INFO "Adding '$ip $hostname' to /etc/hosts..."
        echo "$ip $hostname" | sudo tee -a /etc/hosts > /dev/null
        if [ $? -eq 0 ]; then
            log INFO "Entry '$ip $hostname' added to /etc/hosts successfully."
        else
            log ERROR "Failed to add '$ip $hostname' to /etc/hosts."
        fi
    fi
}

# Call the function to add the hosts entry
add_hosts_entry

check_k3s_ready() {
    while true; do
        if kubectl get nodes &> /dev/null; then
            log INFO "k3s is ready!"
            break
        else
            log INFO "Waiting for k3s to be ready..."
            sleep 5
        fi
    done
}

# k3s
if ! k3s --version &> /dev/null; then
    log INFO "Installing k3s without traefik..."
    curl -sfL https://get.k3s.io | sudo K3S_KUBECONFIG_MODE="644" INSTALL_K3S_EXEC="--disable traefik --tls-san $tailscale_ip --kubelet-arg=runtime-request-timeout=5h" sh - || { log ERROR "Failed to install k3s."; exit 1; }

    # Copy k3s.yaml to root's .kube directory and ensure directory exists
    log INFO "Copying k3s.yaml to root's .kube directory..."
    sudo mkdir -p /root/.kube || { log ERROR "Failed to create .kube directory in root's home."; exit 1; }
    sudo cp /etc/rancher/k3s/k3s.yaml /root/.kube/config || { log ERROR "Failed to copy k3s.yaml to root's .kube directory."; exit 1; }
    sudo chmod 0644 /root/.kube/config || { log ERROR "Failed to set permissions on k3s.yaml."; exit 1; }

    # Dynamic user home directory for kube/config
    log INFO "Ensuring .kube directory exists in the sudo (non-root) user's home and copying the config..."
    # Ensures the .kube directory exists in the sudo (non-root) user's home and copy the config
    sudo mkdir -p "$INVOKER_HOME/.kube" || { log ERROR "Failed to create .kube directory in the sudo (non-root) user's home."; exit 1; }
    sudo cp /etc/rancher/k3s/k3s.yaml "$INVOKER_HOME/.kube/config" || { log ERROR "Failed to copy k3s.yaml to the sudo (non-root) user's .kube directory."; exit 1; }
    sudo chmod 0644 "$INVOKER_HOME/.kube/config" || { log ERROR "Failed to set permissions on k3s.yaml in the sudo (non-root) user's .kube directory."; exit 1; }
    sudo chown $SUDO_USER:$SUDO_USER "$INVOKER_HOME/.kube/config" || { log ERROR "Failed to set ownership on k3s.yaml in the sudo (non-root) user's .kube directory."; exit 1; }

    log INFO "k3s installed successfully."

    check_k3s_ready
else
    log WARN "k3s is already installed."
fi

# create jobdone-nexus namespace
if ! kubectl get namespace jobdone-nexus &> /dev/null; then
    log INFO "Creating jobdone-nexus namespace..."
    kubectl create namespace jobdone-nexus || { log ERROR "Failed to create jobdone-nexus namespace."; exit 1;}
    log INFO "jobdone-nexus namespace created successfully."
else
    log WARN "jobdone-nexus namespace already exists."
fi

# eget
if ! eget --version &> /dev/null; then
    log INFO "Installing eget..."
    download_url=$(curl https://api.github.com/repos/zyedidia/eget/releases/latest -s | grep linux_amd64 | grep browser_download_url | cut -d '"' -f4)
    curl -SsL ${download_url} -o /tmp/eget.tar.gz || { log ERROR "Failed to download eget."; exit 1; }
    tar -xf /tmp/eget.tar.gz --strip-components=1 -C /tmp/ || { log ERROR "Failed to extract eget."; exit 1; }
    sudo mv /tmp/eget /usr/local/bin/eget || { log ERROR "Failed to move eget to /usr/local/bin."; exit 1; }
    sudo chmod +x /usr/local/bin/eget || { log ERROR "Failed to make eget executable."; exit 1; }
    log INFO "eget installed successfully."
else
    log WARN "eget is already installed."
fi

# k9s
if ! k9s version &> /dev/null; then
    log INFO "Installing k9s to /usr/local/bin"
    sudo /usr/local/bin/eget -q --to /usr/local/bin derailed/k9s --asset=tar.gz --asset=^sbom || { log ERROR "Failed to install k9s."; exit 1; }
    log INFO "k9s installed successfully."
else
    log WARN "k9s is already installed."
fi

# tacticalrmm agent
if [ ! -f /usr/local/bin/rmmagent ]; then
    # Check if optional environment variables for TRMM installation are set
    if [ -z "$trmm_mesh_agent" ] || [ -z "$trmm_api_url" ] || [ -z "$trmm_client_id" ] || [ -z "$trmm_site_id" ] || [ -z "$trmm_auth_key" ]; then
        log WARN "Optional parameters for TRMM installation are not set. Installation will be skipped."
    else
        log INFO "Installing TacticalRMM agent..."
        wget https://raw.githubusercontent.com/netvolt/LinuxRMM-Script/main/rmmagent-linux.sh || { log ERROR "Failed to download TacticalRMM script."; exit 1; }
        sudo chmod +x rmmagent-linux.sh || { log ERROR "Failed to make TacticalRMM script executable."; exit 1; }
        sudo ./rmmagent-linux.sh install 'amd64' $trmm_mesh_agent $trmm_api_url $trmm_client_id $trmm_site_id $trmm_auth_key server || { log ERROR "Failed to install TacticalRMM agent."; exit 1; }
        log INFO "TacticalRMM agent installed successfully, check if the token was accepted."
    fi
else
    log WARN "TacticalRMM agent is already installed."
fi

# show /etc/rancher/k3s/k3s.yaml with instructions
k3s_argocd_file_name="${tailscale_ip}-${hostname}.yaml"
echo -e "\n\n"
cat /etc/rancher/k3s/k3s.yaml
echo -e "\n\n"
log INFO "Copy the content of the k3s.yaml file to the ArgoCD Manager node and name it: $k3s_argocd_file_name"
echo -e "\n\n"

log INFO "JobDone Nexus Installation complete!"

# ask for reboot
read -p "Reboot now? (yes/no): " REBOOT_CHOICE
if [[ "$REBOOT_CHOICE" == "yes" ]]; then
    log INFO "Rebooting..."
    reboot
else
    log INFO "Reboot skipped."
fi
# First, let's add the skip-machine-id parameter to the usage message
if [ "$1" != "install" ]; then
    echo "Usage: $0 install --hostname <hostname> --tailscale-authkey <tailscale_authkey> --trmm-mesh-agent <trmm_mesh_agent> --trmm-api-url <trmm_api_url> --trmm-client-id <trmm_client_id> --trmm-site-id <trmm_site_id> --trmm-auth-key <trmm_auth_key> [--static-ip <static_ip>] [--gateway <gateway>] [--netmask <netmask>] [--dns <dns>] [--skip-machine-id]"
    exit 1
fi
shift # Remove the 'install' argument, leaving only the named parameters

# Add skip_machine_id variable to the initialization section
skip_machine_id=false

# Add the skip-machine-id flag to the parameter parsing section
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --hostname) hostname="$2"; shift ;;
        --tailscale-authkey) tailscale_authkey="$2"; shift ;;
        --skip-machine-id) skip_machine_id=true ;;  # New parameter
        
        # Rest of the parameters remain the same
        --trmm-mesh-agent) trmm_mesh_agent="$2"; shift ;;
        --trmm-api-url) trmm_api_url="$2"; shift ;;
        --trmm-client-id) trmm_client_id="$2"; shift ;;
        --trmm-site-id) trmm_site_id="$2"; shift ;;
        --trmm-auth-key) trmm_auth_key="$2"; shift ;;
        --static-ip) static_ip="$2"; shift ;;
        --gateway) gateway="$2"; shift ;;
        --netmask) netmask="$2"; shift ;;
        --dns) dns="$2"; shift ;;
        *) echo "Unknown parameter passed: $1"; exit 1 ;;
    esac
    shift
done

# Modify the hostname section to include the machine-id logic
if [ -n "$hostname" ]; then
    log INFO "Setting hostname to $hostname..."
    sudo hostnamectl set-hostname "$hostname" || { log ERROR "Failed to set hostname."; exit 1; }
    # change /etc/hosts
    sudo sed -i "s/127\.0\.1\.1.*/127.0.1.1\t$hostname/" /etc/hosts || { log ERROR "Failed to update /etc/hosts."; exit 1; }
    log INFO "Hostname set to $hostname."

    # Machine ID regeneration now depends on the skip_machine_id flag
    if [ "$skip_machine_id" = true ]; then
        log INFO "Skipping machine ID regeneration as requested."
    else
        log INFO "Regenerating machine ID..."
        sudo rm -f /etc/machine-id || { log ERROR "Failed to remove machine ID."; exit 1; }
        sudo systemd-machine-id-setup || { log ERROR "Failed to regenerate machine ID."; exit 1; }
        log INFO "Machine ID regenerated successfully."
    fi
fi