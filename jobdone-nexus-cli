#!/bin/bash

# Inspired by: https://github.com/openreplay/openreplay/blob/main/scripts/helmcharts/init.sh
# Inspired by: https://github.com/openreplay/openreplay/blob/main/scripts/helmcharts/openreplay-cli

# Check if the first argument is "install"
if [ "$1" != "install" ]; then
    echo "Usage: $0 install --user <username> --hostname <hostname> --ssh-public-key <ssh_public_key> --zerotier-id <zerotier_id> --trmm-mesh-agent <trmm_mesh_agent> --trmm-api-url <trmm_api_url> --trmm-client-id <trmm_client_id> --trmm-site-id <trmm_site_id> --trmm-auth-key <trmm_auth_key> [--static-ip <static_ip>] [--gateway <gateway>] [--netmask <netmask>] [--dns <dns>]"
    exit 1
fi
shift # Remove the 'install' argument, leaving only the named parameters

cat << "EOF"

       _       _     _____                     _   _                        _____ _      _____ 
      | |     | |   |  __ \                   | \ | |                      / ____| |    |_   _|
      | | ___ | |__ | |  | | ___  _ __   ___  |  \| | _____  ___   _ ___  | |    | |      | |  
  _   | |/ _ \| '_ \| |  | |/ _ \| '_ \ / _ \ | . ` |/ _ \ \/ / | | / __| | |    | |      | |  
 | |__| | (_) | |_) | |__| | (_) | | | |  __/ | |\  |  __/>  <| |_| \__ \ | |____| |____ _| |_ 
  \____/ \___/|_.__/|_____/ \___/|_| |_|\___| |_| \_|\___/_/\_\\__,_|___/  \_____|______|_____|


EOF

# Initialize variables
user=""
hostname=""
ssh_public_key=""
zerotier_id=""
trmm_mesh_agent=""
trmm_api_url=""
trmm_client_id=""
trmm_site_id=""
trmm_auth_key=""
static_ip=""
gateway=""
netmask=""
dns=""

# Parse named arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --user) user="$2"; shift ;;
        --hostname) hostname="$2"; shift ;;
        --ssh-public-key) ssh_public_key="$2"; shift ;;
        --zerotier-id) zerotier_id="$2"; shift ;;
        --trmm-mesh-agent) trmm_mesh_agent="$2"; shift ;;
        --trmm-api-url) trmm_api_url="$2"; shift ;;
        --trmm-client-id) trmm_client_id="$2"; shift ;;
        --trmm-site-id) trmm_site_id="$2"; shift ;;
        --trmm-auth-key) trmm_auth_key="$2"; shift ;;
        --static-ip) static_ip="$2"; shift ;;
        --gateway) gateway="$2"; shift ;;
        --netmask) netmask="$2"; shift ;;
        --dns) dns="$2"; shift ;;
        *) echo "Unknown parameter passed: $1"; exit 1 ;;
    esac
    shift
done

# Check if variables are set
if [ -z "$user" ] || [ -z "$hostname" ] || [ -z "$ssh_public_key" ] || [ -z "$zerotier_id" ] || [ -z "$trmm_mesh_agent" ] || [ -z "$trmm_api_url" ] || [ -z "$trmm_client_id" ] || [ -z "$trmm_site_id" ] || [ -z "$trmm_auth_key" ]; then
    echo "Usage: $0 install --user <username> --hostname <hostname> --ssh-public-key <ssh_public_key> --zerotier-id <zerotier_id> --trmm-mesh-agent <trmm_mesh_agent> --trmm-api-url <trmm_api_url> --trmm-client-id <trmm_client_id> --trmm-site-id <trmm_site_id> --trmm-auth-key <trmm_auth_key> [--static-ip <static_ip>] [--gateway <gateway>] [--netmask <netmask>] [--dns <dns>]"
    exit 1
fi

# Define log file with timestamp
log_file="jobdone_nexus_installation_$(date +%Y-%m-%dT%H:%M:%S).log"

# Function to log messages with levels
log() {
    local level=$1
    local message=$2
    local prefix=""
    case $level in
        INFO) prefix="\e[34mℹ️ [INFO]";;  # Blue
        WARN) prefix="\e[33m⚠️ [WARN]";;  # Yellow
        ERROR) prefix="\e[31m❌ [ERROR]";; # Red
        *) prefix="\e[0m📘";;             # Default
    esac
    echo -e "$prefix [$$(date +%Y-%m-%dT%H:%M:%S)] - $message\e[0m" | tee -a $log_file
}

# log params
log INFO "user: $user"
log INFO "hostname: $hostname"
log INFO "ssh_public_key: $ssh_public_key"
log INFO "zerotier_id: $zerotier_id"
log INFO "trmm_mesh_agent: $trmm_mesh_agent"
log INFO "trmm_api_url: $trmm_api_url"
log INFO "trmm_client_id: $trmm_client_id"
log INFO "trmm_site_id: $trmm_site_id"
log INFO "trmm_auth_key: $trmm_auth_key"
log INFO "static_ip: $static_ip"
log INFO "gateway: $gateway"
log INFO "netmask: $netmask"
log INFO "dns: $dns"

# check if this script is running as root
if [ "$EUID" -ne 0 ]; then
    log ERROR "Please run as root."
    exit 1
fi

# set the hostname if it's provided
if [ -n "$hostname" ]; then
    log INFO "Setting hostname to $hostname..."
    hostnamectl set-hostname "$hostname" || { log ERROR "Failed to set hostname."; exit 1; }
    # change /etc/hosts
    sed -i "s/127\.0\.1\.1.*/127.0.1.1\t$hostname/" /etc/hosts || { log ERROR "Failed to update /etc/hosts."; exit 1; }
    log INFO "Hostname set to $hostname."
fi

# regenerate machine ID
log INFO "Regenerating machine ID..."
rm -f /etc/machine-id
systemd-machine-id-setup || { log ERROR "Failed to regenerate machine ID."; exit 1; }
log INFO "Machine ID regenerated successfully."

# install basic pacakges as root
apt update || { log ERROR "Failed to update apt."; exit 1; }
apt install -y curl sudo unzip vim htop git net-tools wget ncdu network-manager || { log ERROR "Failed to install basic packages."; exit 1; }

# add ssh public key
if [ -n "$ssh_public_key" ]; then
    log "Adding SSH public key to root's authorized_keys..."
    mkdir -p /root/.ssh
    echo "$ssh_public_key" >> /root/.ssh/authorized_keys
    chmod 600 /root/.ssh/authorized_keys
    chown root:root /root/.ssh/authorized_keys
    log "SSH public key added successfully."
fi

# add user to sudo group
if ! getent group sudo | grep -q "\b$user\b"; then
    log INFO "Adding $user to sudo group..."
    usermod -aG sudo $user || { log ERROR "Failed to add $user to sudo group."; exit 1; }
    log INFO "$user added to sudo group."
else
    log WARN "$user is already in sudo group."
fi

check_k3s_ready() {
    while true; do
        if kubectl get nodes &> /dev/null; then
            log INFO "k3s is ready!"
            break
        else
            log INFO "Waiting for k3s to be ready..."
            sleep 5
        fi
    done
}

# k3s
if ! k3s --version &> /dev/null; then
    log INFO "Installing k3s without traefik..."
    curl -sfL https://get.k3s.io | sudo K3S_KUBECONFIG_MODE="644" INSTALL_K3S_EXEC="--disable traefik" sh - || { log ERROR "Failed to install k3s."; exit 1; }
    # directory creation
    [[ -d /home/$user/.kube ]] || mkdir /home/$user/.kube
    [[ -d ~/.kube ]] || mkdir ~/.kube
    # copy k3s
    sudo cp /etc/rancher/k3s/k3s.yaml /home/$user/.kube/config
    sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
    # change owner
    sudo chmod 0644 /home/$user/.kube/config
    sudo chmod 0644 ~/.kube/config
    # user
    sudo chown -R $user /home/$user/.kube/config
    sudo chown -R root ~/.kube/config
    # sleep
    sleep 10
    log INFO "k3s installed successfully."

    check_k3s_ready
else
    log WARN "k3s is already installed."
fi

# argocd
if ! kubectl get ns argocd &> /dev/null; then
    log INFO "Installing ArgoCD..."
    kubectl create namespace argocd || { log ERROR "Failed to create ArgoCD namespace."; exit 1; }
    kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml || { log ERROR "Failed to install ArgoCD."; exit 1; }
    log INFO "ArgoCD installed successfully."
else
    log WARN "ArgoCD is already installed."
fi

# eget
if ! eget --version &> /dev/null; then
    log INFO "Installing eget..."
    download_url=$(curl https://api.github.com/repos/zyedidia/eget/releases/latest -s | grep linux_amd64 | grep browser_download_url | cut -d '"' -f4)
    curl -SsL ${download_url} -o /tmp/eget.tar.gz || { log ERROR "Failed to download eget."; exit 1; }
    tar -xf /tmp/eget.tar.gz --strip-components=1 -C /tmp/ || { log ERROR "Failed to extract eget."; exit 1; }
    sudo mv /tmp/eget /usr/local/bin/eget || { log ERROR "Failed to move eget to /usr/local/bin."; exit 1; }
    sudo chmod +x /usr/local/bin/eget || { log ERROR "Failed to make eget executable."; exit 1; }
    log INFO "eget installed successfully."
else
    log WARN "eget is already installed."
fi

# k9s
if ! k9s version &> /dev/null; then
    log INFO "Installing k9s to /usr/local/bin"
    sudo /usr/local/bin/eget -q --to /usr/local/bin derailed/k9s --asset=tar.gz --asset=^sbom || { log ERROR "Failed to install k9s."; exit 1; }
    log INFO "k9s installed successfully."
else
    log WARN "k9s is already installed."
fi

# zerotier
if ! zerotier-cli info &> /dev/null; then
    log INFO "Setting up ZeroTier..."
    curl -s https://install.zerotier.com | sudo bash || { log ERROR "Failed to install ZeroTier."; exit 1; }
    sudo zerotier-cli join $zerotier_id || { log ERROR "Failed to join ZeroTier network."; exit 1; }
    log INFO "ZeroTier setup complete."
else
    log WARN "ZeroTier is already installed."
fi

# tacticalrmm agent
if [ ! -f /usr/local/bin/rmmagent ]; then
    log INFO "Installing TacticalRMM agent..."
    wget https://raw.githubusercontent.com/netvolt/LinuxRMM-Script/main/rmmagent-linux.sh || { log ERROR "Failed to download TacticalRMM script."; exit 1; }
    sudo chmod +x rmmagent-linux.sh
    sudo ./rmmagent-linux.sh install 'amd64' $trmm_mesh_agent $trmm_api_url $trmm_client_id $trmm_site_id $trmm_auth_key server || { log ERROR "Failed to install TacticalRMM agent."; exit 1; }
    log INFO "TacticalRMM agent installed successfully, check if the token was accepted."
else
    log WARN "TacticalRMM agent is already installed."
fi

log INFO "JobDone Nexus Installation complete!"

# if network configuration is provided, apply it
if [ -n "$static_ip" ] && [ -n "$gateway" ] && [ -n "$netmask" ] && [ -n "$dns" ]; then
    log INFO "Setting up network configuration..."
    
    # List all available network interfaces and prompt user to select one
    log INFO "Identifying available network interfaces..."
    nmcli device status
    read -p "Enter the interface name to configure: " INTERFACE_NAME

    CONNECTION_NAME=$(nmcli -t -f UUID,TYPE,DEVICE con show --active | grep "$INTERFACE_NAME" | cut -d':' -f1)

    if [ -z "$CONNECTION_NAME" ]; then
        log INFO "Selected interface is not active or does not exist."
        exit 1
    fi

    TIMESTAMP=$(date +%Y-%m-%dT%H:%M:%S)
    BACKUP_CONFIG="/tmp/network_config_backup_${CONNECTION_NAME}_${TIMESTAMP}.nmconnection"
    nmcli con export "$CONNECTION_NAME" > "$BACKUP_CONFIG"
    log INFO "Current configuration for $INTERFACE_NAME backed up to $BACKUP_CONFIG"

    # Set static IP
    nmcli con mod "$CONNECTION_NAME" ipv4.addresses "$static_ip/$netmask" ipv4.gateway "$gateway" ipv4.dns "$dns" ipv4.method manual

    # Restart network connection to apply changes
    nmcli con down "$CONNECTION_NAME" && nmcli con up "$CONNECTION_NAME"

    # Check for internet connectivity
    ping -c 4 8.8.8.8 > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        log INFO "Internet connection is up. Static IP set successfully."
        NEW_CONFIG="/tmp/network_config_new_${CONNECTION_NAME}_${TIMESTAMP}.nmconnection"
        nmcli con export "$CONNECTION_NAME" > "$NEW_CONFIG"
        log INFO "New configuration applied. Review changes below:"
        diff "$BACKUP_CONFIG" "$NEW_CONFIG" || log "No changes were detected."
    else
        log WARN "Internet connection failed."
        read -p "Restore original configuration? (yes/no): " RESTORE_CHOICE
        if [[ "$RESTORE_CHOICE" == "yes" ]]; then
            nmcli con load "$BACKUP_CONFIG" && nmcli con up "$CONNECTION_NAME"
            log WARN "Original configuration restored."
        else
            log WARN "Keeping new configuration as per user request."
        fi
    fi
fi

# ask for reboot
read -p "Reboot now? (yes/no): " REBOOT_CHOICE
if [[ "$REBOOT_CHOICE" == "yes" ]]; then
    log INFO "Rebooting..."
    reboot
else
    log INFO "Reboot skipped."
fi
